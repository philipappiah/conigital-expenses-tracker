openapi: "3.0.0"
info:
  version: "3.0.0"
  title: Congital Open API
  license:
    name: MIT
servers:
  - url: http://localhost:4000
paths:
  /expenses:

    post:
      summary: Create an expense
      operationId: createExpenses
      tags:
        - expenses
      requestBody:
          required: true
          description: The expense to create
          content:
            application/json:
              schema:
                type: object
                properties:
                  category:
                    type: string
                    example: Groceries
                  title:
                    type: string
                    example: Food Stuffs
                  cost:
                    type: number
                    example: 20
          
          
      responses:
        '201':
          description: Expense successfully created
       
    get:
      summary: List all expenses
      operationId: listExpenses
      tags:
        - expenses
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A paged array of expenses
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Expenses"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
                        
  /expenses/{expenseId}:
    get:
      summary: Info for a specific expense
      operationId: showExpenseById
      tags:
        - expenses
      parameters:
        - name: expenseId
          in: path
          required: true
          description: The id of the expense to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expense object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"
        

    patch:
      summary: Update a specific expense
      operationId: updateExpenseById
      tags:
        - expenses
      parameters:
        - name: expenseId
          in: path
          required: true
          description: The id of the expense to update
      requestBody:
          required: true
          description: The expense to create
          content:
            application/json:
              schema:
                type: object
       
      responses:
        '200':
          description: Updated resource object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"
        
    
      
    delete:
      summary: Delete a specific expense
      operationId: updateExpenseById
      tags:
        - expenses
      parameters:
        - name: expenseId
          in: path
          required: true
          description: The id of the expense to delete
          schema:
            type: string
      responses:
        '200':
          description: Expense deleted



  /expenses/reports/{reportName-month}:
    get:
      summary: View and download reports in csv formet
      operationId: viewReportByName
      tags:
        - reports
      parameters:
        - name: reportName-month
          in: path
          required: true
          description: Two reports are availabe and can be accessed by specifying the report name followed by a hyphen and the month as number. Example; report1-7 (this will retrieve report 1 for the month of July), report2-7 (this will retrieve report 2 for the month of July). For the purpose of this app, the schedule time has been set to every 10 minutes.
          example: report1-7
          schema:
            type: string
      responses:
        '200':
          description: Report in csv format
          

  

components:
  schemas:
    Expense:
      type: object
      required:
        - category
        - title
        - cost
      properties:
        id:
          type: string
          description: string generated by the server/database; not part of input.
        category:
          type: string
          description: Category of expense; Accepted values are Entertainment , Transport, Groceries, Shopping, Other
        title:
          type: string
          description: title of expense
        cost:
          type: number
          description: cost of expense
        time:
          type: string
          description: Time when added (ISO8601 compliant date-time string) - Auto added by the server; not part of input

    Expenses:
      type: array
      items:
        $ref: "#/components/schemas/Expense"

   